





DrMark's Awards






































© Copyright Mark Grechanik 2012






Generating Integration Tests Automatically Using Frequent Patterns 
of Method Execution Sequences.
My  
paper  
won  
the  
first  
place  
and  
the  
best  
paper  
award  
at  
SEKE  
2019
.  
We 
created 
a     
novel     
framework     
for     
automatically     
synthesizing     
effective 
system/integration  
tests  
that  
find  
bugs  
efficiently.  
This  
paper  
is  
a  
first  
small 
step  
in  
my  
three-pronged  
research  
program  
for  
Automatic  
Synthesis  
of  
System 
and  
Integration  
Software  
Tests  
(ASSIST).  
New  
algorithms  
and  
techniques  
will 
be  
created  
and  
evaluated  
as  
part  
of  
the  
work  
on  
this  
project  
for  
automatically 
obtaining  
models  
that  
describe  
interacting  
components,  
thus  
reducing  
the  
number 
of  
synthesized  
system  
and  
integration  
tests  
and  
increasing  
their  
fault-finding 
power.  
Also,  
a  
novel  
way  
will  
be  
created  
in  
which  
static  
and  
dynamic  
analyses  
and 
machine  
learning  
are  
used  
to  
obtain  
test  
input  
data  
as  
well  
as  
oracles  
for  
the 
synthesized system and integration tests..
College of Engineering Research Award From UIC
Testing Applications with Data Anonymization (TaDa!)
T
esting  
Applications  
with  
Data  
Anonymization  
(TaDa!)  
targets  
a 
problem   
of   
improving   
the   
quality   
of   
testing   
when   
pr
ivacy   
laws 
prohibit  
data  
owners  
to  
share  
data  
with  
testers.  
Please  
read  
our 
award-winning
 ISSRE paper to get more information.
Inferring Types of References to GUI Objects in Test Scripts
We 
offer   
a   
novel   
approach   
for   
Type   
Inference   
of   
GUI   
Object   
References 
(TIGOR)  
in  
test  
scripts.  
TIGOR  
makes  
types  
of  
GUI  
objects  
explicit  
in  
the 
source  
code  
of  
scripts,  
enabling  
test  
engineers  
to  
reason  
more  
effectively  
about 
the  
interactions  
between  
operations  
in  
complex  
test  
scripts  
and  
GUI  
objects 
that  
these  
operations  
reference.  
We  
describe  
our  
implementation  
and  
give  
an 
algorithm  
for  
automatically  
inferring  
types  
of  
GUI  
objects.  
We  
built  
a  
tool  
and 
evaluated  
it  
on  
different  
GAPs.  
Our  
experience  
suggests  
that  
TIGOR  
is  
practical 
and efficient, and it yields appropriate types of GUI objects.





















































Chronological

ByTopic















































